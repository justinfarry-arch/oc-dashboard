// OC Dashboard Menu (JXA) ‚Äì run with: osascript -l JavaScript ~/oc-dashboard/apps/OC_Dashboard_Menu.jxa
ObjC.import('stdlib');
const app = Application.currentApplication();
app.includeStandardAdditions = true;

/* ---------- Shell helpers ---------- */
function sh(cmd) { return app.doShellScript(cmd); }
function shQuote(s) { return "'" + String(s).replace(/'/g, "'\\''") + "'"; }

/* ---------- Load config (handles ~ expansion) ---------- */
function loadConfig() {
  const HOME = sh('printf %s "$HOME"');
  const local  = `${HOME}/oc-dashboard/config.local.json`;
  const sample = `${HOME}/oc-dashboard/config.example.json`;
  try {
    const s = sh(`cat ${shQuote(local)}`);
    return JSON.parse(s);
  } catch (_) {
    const s = sh(`cat ${shQuote(sample)}`);
    return JSON.parse(s);
  }
}
const CFG = loadConfig();

/* ---------- Normalize your grouped JSON to a flat object C ---------- */
const C = (() => {
  const S = CFG["IP allowlisting"] || {};
  const O = CFG.other || {};
  return {
    router_ip:       CFG.router_ip       ?? S.router_ip,
    orbi_mesh_ip:    CFG.orbi_mesh_ip    ?? S.orbi_mesh_ip,
    server_ip:       CFG.server_ip       ?? S.server_ip,
    tx_hostport:     CFG.tx_hostport     ?? S.tx_hostport,
    portainer:       CFG.portainer       ?? S.portainer,
    switch_ip:       CFG.switch_ip       ?? S.switch_ip,
    nas_ip:          CFG.nas_ip          ?? S.nas_ip,
    macs:            CFG.macs            ?? {},
    server_ssh:      CFG.server_ssh      ?? O.server_ssh,
    dashboard_url:   CFG.dashboard_url   ?? O.dashboard_url,
    master_shortcut: CFG.master_shortcut ?? O.master_shortcut ?? "OC Dashboard Menu",
    chrome_profile:  CFG.chrome_profile  ?? O.chrome_profile  ?? "Default",
    nas_share_urls:  CFG.nas_share_urls  ?? O.nas_share_urls  ?? []
  };
})();

/* ---------- Shortcuts launcher (safe quoting + diagnostics) ---------- */
function runShortcut(name, input = "") {
  const cmd = "/usr/bin/shortcuts run " + shQuote(name) + (input ? (" --input " + shQuote(input)) : "");
  try { sh(cmd); }
  catch (e) {
    const list = (()=>{ try { return sh("/usr/bin/shortcuts list 2>/dev/null | head -n 100"); } catch(_){ return "n/a"; } })();
    app.displayAlert("Shortcuts CLI error", {message: `Tried:\n${cmd}\n\n${e}\n\nVisible shortcuts:\n${list}`});
  }
}

/* ---------- Status helpers (ICMP + TCP fallback) ---------- */
function hostEmoji(ip, ports=[]) {
  try { sh(`/sbin/ping -c1 -W 1000 ${ip}`); return "‚úÖ"; } catch (_) {}
  for (const p of ports) {
    try { sh(`/usr/bin/nc -z -G 1 ${ip} ${p}`); return "‚úÖ"; } catch (_) {}
  }
  return "üü•";
}
function statusSummary() {
  const rtr = hostEmoji(C.router_ip, [80,443,53,8291]);   // MikroTik
  const nas = hostEmoji(C.nas_ip,    [445,139,80,443]);   // NAS
  const srv = hostEmoji(C.server_ip, [22,80,443,9091]);   // Server / Transmission
  const sw  = C.switch_ip ? hostEmoji(C.switch_ip, [80,443]) : "‚Äî";
  return `Router (SYSOP-GW): ${rtr}
NAS (DATAVAULT-NAS): ${nas}
Server (MUTINY-SRV): ${srv}
Switch (PATCHBAY-SW): ${sw}`;
}

/* ---------- Misc helpers ---------- */
function openInChromeProfile(url, profile = "Default") {
  sh(`/usr/bin/open -na "Google Chrome" --args --profile-directory=${shQuote(profile)} ${shQuote(url)}`);
}
function haveShortcut(name) {
  try { sh(`/usr/bin/shortcuts list | sed -e 's/[[:space:]]*$//' | grep -Fx ${shQuote(name)}`); return true; }
  catch(_) { return false; }
}
function verifyTargets(names) {
  const missing = names.filter(n => !haveShortcut(n));
  if (missing.length) app.displayAlert("Missing Shortcuts", {message: missing.join("\n")});
  else app.displayNotification("All targets found ‚úÖ", {withTitle: "OC Dashboard"});
}
function wol(mac) {
  try { sh(`/opt/homebrew/bin/wakeonlan ${mac}`); }
  catch(e) { app.displayAlert("WOL error", {message: String(e)}); }
}
function runSpeedtestAndLog() {
  try {
    const out = sh(`/opt/homebrew/bin/speedtest --format=json 2>/dev/null`);
    const o = JSON.parse(out);
    const row = [
      new Date().toISOString(),
      o.download?.bandwidth ?? "",
      o.upload?.bandwidth ?? "",
      o.ping?.latency ?? ""
    ].join(",") + "\n";
    sh(`printf %s ${shQuote(row)} >> "$HOME/OC_Dashboard_speedtest.csv"`);
    app.displayNotification("Speedtest complete", {withTitle: "OC Dashboard"});
  } catch (e) {
    app.displayAlert("Speedtest failed", {message: String(e)});
  }
}

/* ---------- Submenus ---------- */
function submenuRouters() {
  const choice = app.chooseFromList(
    ["Launch UI (SYSOP-GW)", "Launch Patchbay UI", "Launch WiFi UI", "‚¨Ö Back to Main Menu"],
    {withTitle: "Routers & Network", okButtonName: "Run", cancelButtonName: "Cancel"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Launch UI (SYSOP-GW)": runShortcut("OC‚û•LNK SYSOP-GW"); break;
    case "Launch Patchbay UI":   runShortcut("OC‚û•LNK PATCHBAY-SW"); break;
    case "Launch WiFi UI":       runShortcut("OC‚û•LNK CCLF-NET"); break;
    case "‚¨Ö Back to Main Menu":  mainMenu(); break;
  }
}

function submenuServers() {
  const choice = app.chooseFromList(
    ["Launch SSH (MUTINY-SRV)", "Launch SSH (VM)", "View Status (MUTINY-SRV)", "‚¨Ö Back to Main Menu"],
    {withTitle: "Servers"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Launch SSH (MUTINY-SRV)": runShortcut("OC‚û•SSH MUTINY-SRV"); break;
    case "Launch SSH (VM)":         runShortcut("OC‚û•SSH MUTINY-VM"); break;
    case "View Status (MUTINY-SRV)":runShortcut("OC‚û•STS MUTINY-SRV"); break;
    case "‚¨Ö Back to Main Menu":     mainMenu(); break;
  }
}

function submenuNAS() {
  const choice = app.chooseFromList(
    ["Launch SSH", "Launch UI", "View Status", "‚¨Ö Back to Main Menu"],
    {withTitle: "NAS"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Launch SSH":  runShortcut("OC‚û•SSH DATAVAULT-NAS2"); break;
    case "Launch UI":   runShortcut("OC‚û•LNK DATAVAULT-NAS"); break;
    case "View Status": runShortcut("OC‚û•STS DATAVAULT-NAS"); break;
    case "‚¨Ö Back to Main Menu": mainMenu(); break;
  }
}

function submenuTorrents() {
  const choice = app.chooseFromList(
    ["Transfer Torrents", "Launch Seedbox UI", "Launch IPTorrents", "View Downloads", "‚¨Ö Back to Main Menu"],
    {withTitle: "Torrents"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Transfer Torrents": runShortcut("OC‚û•SSH TRANSFER-TOR"); break;
    case "Launch Seedbox UI": runShortcut("OC‚û•LNK SEED-SR71"); break;
    case "Launch IPTorrents": runShortcut("OC‚û•LNK IPTORRENTS"); break;
    case "View Downloads":    runShortcut("OC‚û•STS SR71-VIEW"); break;
    case "‚¨Ö Back to Main Menu": mainMenu(); break;
  }
}

function submenuControlCenter() {
  const choice = app.chooseFromList(
    ["OmniCore Dashboard", "About / Help", "‚¨Ö Back to Main Menu"],
    {withTitle: "Control Center"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "OmniCore Dashboard":
      openInChromeProfile(C.dashboard_url, C.chrome_profile);
      break;
    case "About / Help":
      app.displayAlert("About / Help", {
        message: "Use the menu to launch subsystems. Back returns here. Names must match Shortcuts exactly.\n\nRouters, Servers, NAS, Torrents, Keys, Control Center, Utilities."
      });
      mainMenu(); break;
    case "‚¨Ö Back to Main Menu":
      mainMenu(); break;
  }
}

function submenuUtilities() {
  const choice = app.chooseFromList(
    ["Status Snapshot", "Run Speedtest (log)", "Verify Shortcut Targets", "Wake Device via WOL", "Update from GitHub", "‚¨Ö Back to Main Menu"],
    {withTitle: "Utilities", okButtonName: "Run", cancelButtonName: "Cancel"}
  );
  if (!choice) return;

  switch (choice[0]) {
    case "Status Snapshot":
      app.displayAlert("Home Status", {message: statusSummary()});
      return submenuUtilities();

    case "Run Speedtest (log)":
      runSpeedtestAndLog();
      return submenuUtilities();

    case "Verify Shortcut Targets":
      verifyTargets([
        "OC‚û•LNK SYSOP-GW","OC‚û•LNK PATCHBAY-SW","OC‚û•LNK CCLF-NET",
        "OC‚û•SSH MUTINY-SRV","OC‚û•SSH MUTINY-VM","OC‚û•STS MUTINY-SRV",
        "OC‚û•SSH DATAVAULT-NAS2","OC‚û•LNK DATAVAULT-NAS","OC‚û•STS DATAVAULT-NAS",
        "OC‚û•SSH TRANSFER-TOR","OC‚û•LNK SEED-SR71","OC‚û•LNK IPTORRENTS",
        "OC‚û•STS SR71-VIEW","OC‚û•MNU‚Ä¢KEYS","OC‚û•LNK OMNICORE=DSH"
      ]);
      return submenuUtilities();

    case "Wake Device via WOL": {
      const macs = (C.macs && typeof C.macs === 'object') ? C.macs : {};
      const names = Object.keys(macs);
      if (!names.length) {
        app.displayAlert("No MACs configured", {message: "Add entries under `macs` in config.local.json"});
        return submenuUtilities();
      }
      const pick = app.chooseFromList(names, {withTitle: "Wake Device", okButtonName: "Wake", cancelButtonName: "Back"});
      if (pick && pick[0]) {
        wol(macs[pick[0]]);
        app.displayNotification(`WOL sent to ${pick[0]}`, {withTitle: "OC Dashboard"});
      }
      return submenuUtilities();
    }

    case "Update from GitHub":
      try {
        sh(`cd ${shQuote('~/oc-dashboard')} && git pull --ff-only`);
        app.displayNotification("Updated from GitHub", {withTitle: "OC Dashboard"});
      } catch (e) {
        app.displayAlert("Git update failed", {message: String(e)});
      }
      return submenuUtilities();

    case "‚¨Ö Back to Main Menu":
      return mainMenu();
  }
}

/* ---------- Main ---------- */
function mainMenu() {
  const choice = app.chooseFromList(
    ["üõú Routers & Network", "üíª Servers", "üì¶ NAS", "‚¨áÔ∏è Torrents", "üîë Keys", "üõ†Ô∏è Control Center", "üß∞ Utilities", "‚ùå Exit"],
    {withTitle: "OC Dashboard Menu", okButtonName: "Open", cancelButtonName: "Cancel"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "üõú Routers & Network": submenuRouters(); break;
    case "üíª Servers":           submenuServers(); break;
    case "üì¶ NAS":               submenuNAS(); break;
    case "‚¨áÔ∏è Torrents":          submenuTorrents(); break;
    case "üîë Keys":              runShortcut("OC‚û•MNU‚Ä¢KEYS"); break;
    case "üõ†Ô∏è Control Center":   submenuControlCenter(); break;
    case "üß∞ Utilities":         submenuUtilities(); break;
    case "‚ùå Exit":              return;
  }
}
function run() { mainMenu(); }
