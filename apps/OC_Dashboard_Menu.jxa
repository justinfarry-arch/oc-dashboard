// OC Dashboard Menu (JXA) ‚Äì runs from file with: osascript -l JavaScript ~/oc-dashboard/apps/OC_Dashboard_Menu.jxa
ObjC.import('stdlib');
const app = Application.currentApplication();
app.includeStandardAdditions = true;

// ---------- Helpers ----------
function sh(cmd) {
  return app.doShellScript(cmd);
}
function shQuote(s) { return "'" + String(s).replace(/'/g, "'\\''") + "'"; }

// Load config (expand $HOME properly; local overrides example)
function loadConfig() {
  const HOME = sh('printf %s "$HOME"'); // resolve ~ safely
  const local  = `${HOME}/oc-dashboard/config.local.json`;
  const sample = `${HOME}/oc-dashboard/config.example.json`;
  try {
    const s = sh(`cat ${shQuote(local)}`);
    return JSON.parse(s);
  } catch (e) {
    const s = sh(`cat ${shQuote(sample)}`);
    return JSON.parse(s);
  }
}
const CFG = loadConfig();

function runShortcut(name, input = "") {
  const cmd = "/usr/bin/shortcuts run " + shQuote(name) + (input ? (" --input " + shQuote(input)) : "");
  try {
    sh(cmd);
  } catch (e) {
    const have = (()=>{ try { return sh("command -v /usr/bin/shortcuts || true"); } catch(_){ return "n/a"; } })();
    const list = (()=>{ try { return sh("/usr/bin/shortcuts list 2>/dev/null | head -n 200"); } catch(_){ return "n/a"; } })();
    app.displayAlert("Shortcuts CLI error", {message: `Tried:\n${cmd}\n\n${e}\n\nCLI: ${have}\n\nVisible shortcuts:\n${list}`});
  }
}

function pingEmoji(host) {
  try { sh(`/sbin/ping -c1 -W 200 ${host}`); return "‚úÖ"; } catch (_) { return "üü•"; }
}

function runSpeedtestAndLog() {
  try {
    const out = sh(`/opt/homebrew/bin/speedtest --format=json 2>/dev/null`);
    const o = JSON.parse(out);
    const row = [
      new Date().toISOString(),
      o.download?.bandwidth ?? "",
      o.upload?.bandwidth ?? "",
      o.ping?.latency ?? ""
    ].join(",") + "\n";
    sh(`printf %s ${shQuote(row)} >> "$HOME/OC_Dashboard_speedtest.csv"`);
    app.displayNotification("Speedtest complete", {withTitle: "OC Dashboard"});
  } catch (e) {
    app.displayAlert("Speedtest failed", {message: String(e)});
  }
}

function haveShortcut(name) {
  try { sh(`/usr/bin/shortcuts list | sed -e 's/[[:space:]]*$//' | grep -Fx ${shQuote(name)}`); return true; }
  catch(_) { return false; }
}
function verifyTargets(names) {
  const missing = names.filter(n => !haveShortcut(n));
  if (missing.length) app.displayAlert("Missing Shortcuts", {message: missing.join("\n")});
  else app.displayNotification("All targets found ‚úÖ", {withTitle: "OC Dashboard"});
}

function wol(mac) {
  try { sh(`/opt/homebrew/bin/wakeonlan ${mac}`); }
  catch(e) { app.displayAlert("WOL error", {message: String(e)}); }
}

function statusSummary() {
  const rtr = pingEmoji(CFG.router_ip);  // SYSOP-GW
  const nas = pingEmoji(CFG.nas_ip);     // DATAVAULT-NAS
  const srv = pingEmoji(CFG.server_ip);  // MUTINY-SRV
  return `Router (SYSOP-GW): ${rtr}\nNAS (DATAVAULT-NAS): ${nas}\nServer (MUTINY-SRV): ${srv}`;
}

function openInChromeProfile(url, profile = "Default") {
  sh(`/usr/bin/open -na "Google Chrome" --args --profile-directory=${shQuote(profile)} ${shQuote(url)}`);
}

// ---------- Submenus ----------
function submenuRouters() {
  const choice = app.chooseFromList(
    ["Launch UI (SYSOP-GW)", "Launch Patchbay UI", "Launch WiFi UI", "‚¨Ö Back to Main Menu"],
    {withTitle: "Routers & Network", okButtonName: "Run", cancelButtonName: "Cancel"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Launch UI (SYSOP-GW)": runShortcut("OC‚û•LNK SYSOP-GW"); break;
    case "Launch Patchbay UI":   runShortcut("OC‚û•LNK PATCHBAY-SW"); break;
    case "Launch WiFi UI":       runShortcut("OC‚û•L CCLF-NET".replace(" L ", "LNK ")); break; // avoids unicode paste glitches
    case "‚¨Ö Back to Main Menu":  mainMenu(); break;
  }
}

function submenuServers() {
  const choice = app.chooseFromList(
    ["Launch SSH (MUTINY-SRV)", "Launch SSH (VM)", "View Status (MUTINY-SRV)", "‚¨Ö Back to Main Menu"],
    {withTitle: "Servers"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Launch SSH (MUTINY-SRV)": runShortcut("OC‚û•SSH MUTINY-SRV"); break;
    case "Launch SSH (VM)":         runShortcut("OC‚û•SSH MUTINY-VM"); break;
    case "View Status (MUTINY-SRV)":runShortcut("OC‚û•STS MUTINY-SRV"); break;
    case "‚¨Ö Back to Main Menu":     mainMenu(); break;
  }
}

function submenuNAS() {
  const choice = app.chooseFromList(
    ["Launch SSH", "Launch UI", "View Status", "‚¨Ö Back to Main Menu"],
    {withTitle: "NAS"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Launch SSH":  runShortcut("OC‚û•SSH DATAVAULT-NAS2"); break;
    case "Launch UI":   runShortcut("OC‚û•LNK DATAVAULT-NAS"); break;
    case "View Status": runShortcut("OC‚û•STS DATAVAULT-NAS"); break;
    case "‚¨Ö Back to Main Menu": mainMenu(); break;
  }
}

function submenuTorrents() {
  const choice = app.chooseFromList(
    ["Transfer Torrents", "Launch Seedbox UI", "Launch IPTorrents", "View Downloads", "‚¨Ö Back to Main Menu"],
    {withTitle: "Torrents"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Transfer Torrents": runShortcut("OC‚û•SSH TRANSFER-TOR"); break;
    case "Launch Seedbox UI": runShortcut("OC‚û•LNK SEED-SR71"); break;
    case "Launch IPTorrents": runShortcut("OC‚û•LNK IPTORRENTS"); break;
    case "View Downloads":    runShortcut("OC‚û•STS SR71-VIEW"); break;
    case "‚¨Ö Back to Main Menu": mainMenu(); break;
  }
}

function submenuControlCenter() {
  const choice = app.chooseFromList(
    ["OmniCore Dashboard", "About / Help", "‚¨Ö Back to Main Menu"],
    {withTitle: "Control Center"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "OmniCore Dashboard":
      openInChromeProfile(CFG.dashboard_url, "Default");
      break;
    case "About / Help":
      app.displayAlert("About / Help", {
        message: "Use the menu to launch subsystems. Back returns here. Names must match Shortcuts exactly.\n\nRouters, Servers, NAS, Torrents, Keys, Control Center, Utilities."
      });
      mainMenu(); break;
    case "‚¨Ö Back to Main Menu": mainMenu(); break;
  }
}

function submenuUtilities() {
  const choice = app.chooseFromList(
    ["Status Snapshot", "Run Speedtest (log)", "Verify Shortcut Targets", "Wake NAS via WOL", "Update from GitHub", "‚¨Ö Back to Main Menu"],
    {withTitle: "Utilities", okButtonName: "Run", cancelButtonName: "Cancel"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "Status Snapshot":
      app.displayAlert("Home Status", {message: statusSummary()});
      submenuUtilities();
      break;
    case "Run Speedtest (log)":
      runSpeedtestAndLog();
      submenuUtilities();
      break;
    case "Verify Shortcut Targets":
      verifyTargets([
        "OC‚û•LNK SYSOP-GW","OC‚û•LNK PATCHBAY-SW","OC‚û•LNK CCLF-NET",
        "OC‚û•SSH MUTINY-SRV","OC‚û•SSH MUTINY-VM","OC‚û•STS MUTINY-SRV",
        "OC‚û•SSH DATAVAULT-NAS2","OC‚û•LNK DATAVAULT-NAS","OC‚û•STS DATAVAULT-NAS",
        "OC‚û•SSH TRANSFER-TOR","OC‚û•LNK SEED-SR71","OC‚û•LNK IPTORRENTS",
        "OC‚û•STS SR71-VIEW","OC‚û•MNU‚Ä¢KEYS","OC‚û•LNK OMNICORE=DSH"
      ]);
      submenuUtilities();
      break;
    case "Wake NAS via WOL":
      wol(CFG.nas_mac);
      app.displayNotification("WOL sent to DATAVAULT-NAS", {withTitle: "OC Dashboard"});
      submenuUtilities();
      break;
    case "Update from GitHub":
      try {
        sh("cd " + shQuote("~/oc-dashboard") + " && git pull --ff-only");
        app.displayNotification("Updated to latest from GitHub", {withTitle: "OC Dashboard"});
      } catch (e) {
        app.displayAlert("Git update failed", {message: String(e)});
      }
      submenuUtilities();
      break;
    case "‚¨Ö Back to Main Menu":
      mainMenu();
      break;
  }
}

// ---------- Main ----------
function mainMenu() {
  const choice = app.chooseFromList(
    ["üõú Routers & Network", "üíª Servers", "üì¶ NAS", "‚¨áÔ∏è Torrents", "üîë Keys", "üõ†Ô∏è Control Center", "üß∞ Utilities", "‚ùå Exit"],
    {withTitle: "OC Dashboard Menu", okButtonName: "Open", cancelButtonName: "Cancel"}
  );
  if (!choice) return;
  switch (choice[0]) {
    case "üõú Routers & Network": submenuRouters(); break;
    case "üíª Servers":           submenuServers(); break;
    case "üì¶ NAS":               submenuNAS(); break;
    case "‚¨áÔ∏è Torrents":          submenuTorrents(); break;
    case "üîë Keys":              runShortcut("OC‚û•MNU‚Ä¢KEYS"); break;
    case "üõ†Ô∏è Control Center":   submenuControlCenter(); break;
    case "üß∞ Utilities":         submenuUtilities(); break;
    case "‚ùå Exit":              return;
  }
}
function run() { mainMenu(); }
